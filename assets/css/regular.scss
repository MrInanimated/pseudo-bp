#MainContainer {
    font: 16px 'Montserrat', Arial, sans-serif;
}

#MainContainer {
    position: absolute;
    width: 800px;
    height: 800px;
    left: calc(50% - 400px);
    top: calc(50% - 400px);
}

#BombElement {
    position: absolute;
    width: 100%;
    height: 100%;

    background-image: url("/images/Bomb.png");
    background-repeat: no-repeat;
    background-position: calc(50% - 7px) calc(50% - 3px);
    image-rendering: optimizeSpeed;
}

#BombElement::before {
    content: "";
    position: absolute;
    left: calc(50% - 66px);
    top: calc(50% - 52px);
    width: 40px;
    height: 40px;
    background-image: url("/images/Sparkle.png");
    background-repeat: no-repeat;
    background-size: 100%;
    image-rendering: optimizeSpeed;
}

#MainContainer:not(.Playing) #BombElement::before {
    opacity: 0;
}

#ArrowElement {
    position: absolute;
    width: 100%;
    height: 100%;

    background-image: url("/images/Arrow.png");
    background-repeat: no-repeat;
    background-position: calc(50% + 64px) 50%;
    image-rendering: optimizeSpeed;

    transition: transform 0.5s cubic-bezier(0, 0, 0.2, 1);
}

#MainContainer:not(.Playing) #ArrowElement {
    opacity: 0;
}

#StatusContainer {
    position: absolute;
    top: 50%;
    width: 100%;
    text-align: center;
    word-wrap: break-word;
    margin-top: 75px;
    pointer-events: none;
}

#StatusContainer.Top {
    margin-top: -175px;
}

#StatusContainer .Prompt {
    display: block;
    line-height: 2;
    font-size: 28px;
    transition: color 0.15s ease-in-out;
}

body.Dark #StatusContainer .Prompt {
    color: #fff;
}

#ActorContainer {
    position: absolute;
    width: 100%;
    height: 100%;
}

#ActorContainer > div {
    position: absolute;
    width: 100px;
    height: 100px;
}

#ActorContainer > div.Dead {
    opacity: 0.5;
}

.MainActorContainer {
    position: absolute;
    width: 48px;
    height: 48px;
    left: calc(50% - 24px);
    top: calc(50% - 24px);
}

.ProfilePicture {
    width: 48px;
    height: 48px;
    filter: drop-shadow(0px 0px 8px rgba(0, 0, 0, 0.5));
}

.TopContainer {
    position: absolute;
    left: 50%;
    bottom: 100%;
    text-align: center;
    transform: translate(-50%);
}

.LivesContainer {
}

.HeartContainer {
    display: inline-block;
    width: 24px;
    height: 24px;
}

#MainContainer:not(.Playing) .HeartContainer,
#ActorContainer > div.Dead .HeartContainer{
    display: none;
}

.NameContainer {
    display: inline-block;
    width: 45em;
    text-align: center;
    word-wrap: break-word;

    opacity: 0;
    transition: opacity 0.2s;
}

.ProfilePicture:hover + .TopContainer .NameContainer {
    opacity: 1;
}

.LastWordContainer {
    position: absolute;
    left: 50%;
    top: 100%;
    margin: 0.1em;
    width: 45em;
    text-align: center;
    word-wrap: break-word;
    transform: translate(-50%);
}

#ActorContainer > div.Active .LastWordContainer,
#ActorContainer > div.Active .LastWordContainer .Highlight {
    font-size: 20px;
}

.LastWordContainer .Highlight {
    color: #18bc9c;
}

body.Dark .LastWordContainer .Highlight {
    color: #00bc8c;
}

#LockedLettersContainer {
    position: absolute;
    right: 0;
    top: 0;
    transform-origin: top right;
    color: #444;
    font-family: 'Montserrat', Arial, sans-serif;
}

#LockedLettersContainer.Hidden {
    opacity: 0;
}

#LockedLettersContainer td {
    width: 48px;
    height: 48px;
}

.LockedLetter {
    position: relative;
    width: 48px;
    height: 48px;
    text-align: center;
    background-image: url("/images/Letter.png");
    image-rendering: optimizeSpeed;
    font-size: 24px;
    line-height: 48px;
}

.LockedLetter.Used {
    transform: scale(0.75);
    opacity: 0.4;
}

span.LockedNumber {
    position: absolute;
    display: block;
    font-size: 12px;
    line-height: 1;
    bottom: 8px;
    right: 8px;
}

.LettersLeft {
    position: absolute;
    height: 100%;
    width: 5px;
    background: rgba(0, 0, 0, 0.8);
    border-radius: 5px;
    top: 0;
    right: calc(100% + 5px);
}

body.HideLettersBar .LettersLeft,
#MainContainer:not(.Playing) .LettersLeft,
.Dead .LettersLeft {
    display: none;
}

.ScoreboardHeader {
    display: block;
    font-size: 24px;
}

#ScoreboardTable {
    width: calc(100% - 16px);
    border-collapse: collapse;
    margin: 0 8px;
}

#ScoreboardTable thead th {
    font-size: 10px;
}

#ScoreboardTable thead th:not(:first-child):not(:last-child) {
    padding: 0 1px;
}

#ScoreboardCollapse {
    color: #2c3250;
    background-color: transparent;
    border: none;
    outline: 0;
    opacity: 0.5;
    transition: color 0.15s;
}

body.Dark #ScoreboardCollapse {
    color: #fff;
}

#ScoreboardTable tr > :first-child {
    width: 24px;
}

#ScoreboardTable tr > :last-child {
    width: 60px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

#ScoreboardTable tr.You {
    background-color: rgba(255, 0, 0, 0.2);
}

#ScoreboardTable tr.Dead {
    opacity: 0.5;
}

#ScoreboardTable .HideDead tr.Dead {
    display: none;
}

#ScoreboardTable td img {
    display: block;
    height: 24px;
}

#ScoreboardCollapse:hover,
#ScoreboardCollapse:active {
    opacity: 1;
}

/* Customization stuff */

#ExamplePlayer {
    position: relative;
    font: 16px 'Montserrat', Arial, sans-serif;
    margin-top: 69px;
    height: 2px;
    margin-bottom: 49px;
}

$blank-color: #41322b;
$colors: (
    "red": #e74c3c,
    "orange": #e67e22,
    "yellow": #f1c40f,
    "turquoise": #1abc9c,
    "green": #2ecc71,
    "blue": #3498db,
    "purple": #9b59b6,
    "pink": #ca51ca
);

.ColorBlock {
    display: inline-block;
    position: relative;
    width: 1em;
    height: 1em;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.5);
}

.ColorBlock.defaultColor::before {
    position: absolute;
    content: "";
    width: 10%;
    height: 40%;
    left: 45%;
    top: 30%;
    transform: rotate(45deg);
    background: map-get($colors, "red");
}

.ColorBlock.defaultColor::after {
    @extend .ColorBlock, .defaultColor, ::before;
    transform: rotate(-45deg);
}

@mixin heart-background($color) {
    background-image: linear-gradient(to bottom, $color, $color 50%, $blank-color 50%, $blank-color 100%);
}

@mixin hexagon-background($color) {
    background-image: linear-gradient(to right, $color, $color 50%, $blank-color 50%, $blank-color 100%);
}

.HeartContainer.default {
    @include heart-background(map-get($colors, "red"));
    background-size: 100% 200%;
    background-position: -24px 24px;
    transition: background-position 0.5s;
}

.HeartContainer.default.Full {
    background-position: 0px 0px;
}

.HeartContainer.bar {
    background-color: $blank-color !important;
    background-position: -24px 24px;
    transform: skewX(-20deg);
    position: relative;
    margin: 3px 2px;
    height: 18px;
    width: 20px;
}

.HeartContainer.bar.Full {
    background-position: 0px 0px;
}

.HeartContainer.bar::after {
    content: "";
    background: map-get($colors, "red");
    position: absolute;
    height: 100%;
    left: 0px;
    top: 0;
    transition: width 0.5s;
}

.HeartContainer.bar:not(.Full)::after {
    width: 0;
}

.HeartContainer.bar.Full::after {
    width: 100%;
}

.HeartContainer.hexagon {
    @include hexagon-background(map-get($colors, "red"));
    background-size: 200%;
    background-position: -24px 24px;
    transition: background-position 0.5s;
    transform-origin: 12px 12px;
    transform: rotate(-30deg);
}

.HeartContainer.hexagon.Full {
    background-position: 0px 0px;
}

.HeartContainer.hexagon:not(:first-child) {
    margin-left: -5px;
}

.HeartContainer.hexagon:nth-child(even) {
    margin-bottom: 11px;
    margin-left: -4.5px;
}

.HeartContainer.hexagon:nth-child(even) {
    transform: rotate(30deg);
}

.LettersLeftBar {
    position: absolute;
    width: 5px;
    height: 0;
    background: map-get($colors, "red");
    background-attachment: fixed;
    border-radius: 5px;
    bottom: 0;
    transition: height 0.4s;
}

// Wow, I can't believe I didn't know about the existence of @each

@each $colorName, $colorVal in $colors {
    .ColorBlock.#{$colorName} { background: $colorVal; }
    .HeartContainer.default.#{$colorName} { @include heart-background($colorVal); }
    .HeartContainer.bar.#{$colorName}::after { background: $colorVal; }
    .HeartContainer.hexagon.#{$colorName} { @include hexagon-background($colorVal); }
    .LettersLeftBar.#{$colorName} { background: $colorVal; }
    .LastWordContainer.#{$colorName} .Highlight,
    body.Dark .LastWordContainer.#{$colorName} .Highlight { color: $colorVal; }
}
